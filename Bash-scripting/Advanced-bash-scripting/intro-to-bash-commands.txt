Basic intro
-----------------------------------
grep : returns output based on lines that match the "passed input"
cat : reads out all of the content of a file
tail \ head -n: returns top / last n records based in a file
wc : performs a word or line count based on (flags -w, -l)
sed : performs pattern-matched string replacement
--------------------------------------------------------------------

grep -r ==> To search a file recursively

grep 'Sydney Carton\|Charles Darnay' two_cities.txt | wc -l ==> This helps to find the number
of lines with the words (Sydney Carton and Charles Darnay)

cat two_cities.txt | egrep 'Sydney Carton|Charles Darnay' | wc -l ==> egrep works just like 
above. It has the added benefit of not requring the use of "escape characters".

-------------------------
Creating a bash script
-------------------------------

#!/usr/bash ==> This is used to start every bash script

cat soccer_scores.csv | sed 's/Cherno/Cherno City/g' | sed 's/Arda/Arda United/g' > soccer_scores_edited.csv
==>
THe above is used to replace Cherno & Arda to Cherno City & Arda United respectively globally(rep by "g" keyword)
.If g is missed in the keyword, Only the first instance of the pattern string is replaced.

2 > /dev/null : This redirects STDERR to be deleted.
1 > /dev/null : This would be STDOUT

ARGV : This is the array of all arguments given to the program
$@ and $* : give all the arguments together
$# : gives the number of arguments

cat hire_data/*.csv | grep $1 > $1.csv ==> Use to extract subset of data with "cityname" passed
as first argument to extract data with the "cityname".
-------------------------------------------------------------------------------------------------
HERRIOT-WATT-UNIX-COURSE
--------------------------------------------------------------------------------------------
TODAY=`date`; echo "today is $TODAY"

Backquotes may be used inside weak quotes
------------------------------------------
weak quote is ""
strong quote is ''

To check running processes, use:

ps -f 
ps -e 

ps --> This prints out result on running processes

grep -v regexp file --> Matches lines not containing the regexp

grep -i regexp file --> For case independent matching 

grep -l regexp * --> To list all the files containing regexp 

grep -E --> Useful for full pattern matching(Allows for more complicated regex)
-----------------------------------------------------------------------------------------------------
SED (stream editor)
-------------------------------
sed 2d file --> This outputs the file while deleting the 2nd line. "d" stands for delete 

sed '/splodge/d' chart --> This outputs content of "chart" file while deleting lines containing splodge 

sed '10,20d' chart --> This omits line 10-20 inclusive in the output 

sed '/^hello/,/^bye/d' chart --> This omits lines between the lines that begin with "hello" and "bye"
------------------------------------------------------------------------------------------------------------
SED SUBSTITUTION
---------------------------
Syntax:

sed 's/regexp/replacement/flags' file 

flag "g" --> This means substituting every occurence in the file 

-------------------------------------------------------------------------------------
AWK
------------------
AWK is a pattern matchinf programming language. 

awk '{print $1}' --> Used to select fields

awk -F: '{print $1 "lives at" $2}' bills --> This sets field separator to colon 

awk -F, ’/^[Tt]oast/ { print $1 "costs" $NF }’ menu --> Can also used regular expression 

find searches through a directory tree for files or directories which match the expression 

grep Tom cats | sed 's/Tom/Top/' | awk '{print $1 $NF}' | sort -k 2 

du | cut -f 1 | paste -sd+ | bc  =--> TO compute data disk block usage in the current directory (Other directories
can be passed as argument)

tar --> This is an archiving utility. More like zipping contents of file together 

tar cvf distribution.tar src bin license/* --> This is used for creating the "distribution.tar" file with contents 
like "src, bin and license file". The flag "c" = create; "v" = verbose; and "f" = file provided as argument.

tar tvf distribution.tar --> This shows the files content(flag "t" is alias for table of content)

tar xvf distribution.tar --> To extract the content of the file 






