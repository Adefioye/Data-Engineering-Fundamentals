Assigning variables
----------------------
var1="Moon"

Reference using $ notation as in (echo $var1)

Single quotes ('sometext') = Shell interprets what is between literally
Double quotes ("sometext") = Shell interprets literally and understand $ and backtick that occur
within the quotation mark
----------------------------------------------------------------
Backticks(``) result in a shell-in-a-shell program

rightnow_date="The date is `date`." == "The date is $(date)."
echo $rightnow_date (The below is printed out)
The date is Fri Apr 23 02:38:26 WAT 2021.
---------------------------------------------------------------

----------------------------------------------------------------
"expr" and "bc" can be used in the shell for numeric computation

expr : mainly works with integers
bc : works for both integers and decimals

we can use a shell-within-a-shell argument

model1=87.65
model2=89.20

echo "The total score is $(echo "$model + $model2" | bc)"
echo "The total score is $(echo "($model + $model2) / 2" | bc)"
---------------------------------------------------------------------
How to convert Fahrenheit to Celcius
----------------------------------------
# Get first ARGV into variable
temp_f=$1

# Subtract 32
temp_f2=$(echo "scale=2; $temp_f - 32" | bc)

# Multiply by 5/9 and print
temp_c=$(echo "scale=2; $temp_f2 * 5 / 9" | bc)

# Print the celsius temp
echo $temp_c

# Running this script below
bash script.sh 108 (performs the magic)
------------------------------------------------------------------------------
Extracting temperature data from 3 different files

# Create three variables from the temp data files' contents
temp_a=$(cat temps/region_A)
temp_b=$(cat temps/region_B)
temp_c=$(cat temps/region_C)

# Print out the three variables
echo "The three temperatures were $temp_a, $temp_b, and $temp_c"

-----------------------------------------------------------------------------

WHAT IS AN ARRAY?
--------------------
1) Numerical-indexed array (Similar to list in python)

declare -a my_array (After declaration, we append each element to the array)
Specifying an array: my_array=(1 3 5 2)

echo ${my_array[@]} : returns all elements in array
echo ${#my_array[@]} : returns the length of the array
echo ${my_array[2]} : returns the 3rd element (Zero-indexing is used like python)
my_array[0]=999 : changing the first element in then array to 999
(Please do not use $ sign when trying to overwrite element in an array. Example ($my_array[0]=999))
echo ${my_array[0]}

for slicing an array: my_array[@]:N:M (N= starting index, M=Num of elements to return)

Appending to an array: my_array+=(elements)  (Example: my_array+=(10))

2) Associative array. It has key-value pair similar to python's dictionary 
(Available only in Bash 4 onward)

# To create an addociative array:

declare -A city_details
city_details=([city_name]="New York" [population]=14000000)
echo ${city_details[city_name]}

# We can also declare everything in one line

declare -A city_details=([city_name]="New York" [population]=14000000)

echo $(!city_details[@]) ==> This returns all keys of thne associative array

----------------------------------------------------------------
Creating a bash script that get average of numbers in an array and later append the
average numbwer into the array:

# Create variables from the temperature data files
temp_b="$(cat temps/region_B)"
temp_c="$(cat temps/region_C)"

# Create an array with these variables as elements
region_temps=($temp_b $temp_c)

# Call an external program to get average temperature
average_temp=$(echo "scale=2; (${region_temps[0]} + ${region_temps[1]}) / 2" | bc)

# Append average temp to the array
region_temps+=($average_temp)

# Print out the whole array
echo ${region_temps[@]}


