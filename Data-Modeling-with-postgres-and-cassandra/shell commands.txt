MANIPULATING FILES and DIRECTORIES
----------------------------------------------------------

pwd ==> prints out the absolute path of the file

cd ~/../. ==> change directory to the home directory

ls ~ ==> list files/ directories in the home directory

cd ~ ==> changes directory to te home directory

cp [this_file_name] [another_file_name] ==> copy this_file_name into another_file_name in the same directory

cp [this_filepath] [that_filepath] backup ==> this copy this_filepath and that_filepath into backup directory

mv autumn.csv winter.csv .. ==> This moves autumn.csv and winter.csv up one level to the directory above

rm [file1] [file2] [directory/file3] ==> This removes any kind of file

rmdir [dir_path] ==> This removes empty directory path specified

mkdir ==> this makes a new directory in the filepath

MANIPULATING DATA
------------------------------------------------------------------

cat agarwal.txt ==> This reads the content of all files in agarwal.txt

less seasonal/spring.csv seasonal/summer.csv ==> This allows for us to print out content of the 2 files piece
by piece. (:n) can be used to move to the second file(next file) while (:p) can be used to the previous file.

head text.csv ==> This prints out the first 10 content of the file

head -n 5 text.csv ==> This prints out the first-five lines of the text.csv

ls -R ==> This recursively prints out all of the directories and files and content of the sub-directories

ls -F ==> This prints out directories, files and contents of subirectories. In addition, it prints out / after every
directory and * after every runnable program.

man tail ==> provides the details of the tail command.

cut -f 2-5, 8 -d , text.csv ==> This returns columns 2 through 5 and 8 while using a comma delimiter

history ==> provides an account of the commands that have been run on the terminal. Each has a serial number 
placed in front of it based on the order in which they are typed on the terminal.

!55 ==> This runs the command on serial number 55 on the output of the history command

!head ==> This runs the most recent use of the head command in the terminal's history.

grep biscuit txt.csv ==> This outputs matching lines that contain the text "biscuit" in txt.csv
--------
The important flags that are used with grep:
-n : This output line numbers the matching lines
-c : prints a count of matching lines rather than the lines themselves
-i : makes the search CASE INSENSITIVE
-l : prints the names of files that contain matches, not the matches
-v : invert the match, that is, prints out the non-matching lines
-h : Do not print the names of files whe  searching nultiple files
----------------------------------------------------------------------------------

head -n 5 text.csv > top.csv ==> writes the top 5 lines in text.csv into top.csv

cut -f 2 -d , text.csv | grep -v Tooth ==> this gets the second field of text.csv and pass it as input to "grep"
command on the right(this outputs non-matching lines that dont have the text "Tooth").

wc ==> returns the number of characters, words and lines in a file
----------------------------------------------------------------
The important flags for wc(only use one at a time):
-c : returns number of characters in a file
-w : returns number of words in a file
-l : returns number of characters in a file
--------------------------------------------------------------------

grep 2017-07 text.csv | grep -v Tooth | wc -l ==> returns the number of records in July while eliminating the 
header with the word "Tooth".

head -n 3 *.csv ==> returns the first 3 lines of any csv file in the present working directory


------------
Wildcards
-----------

* : returns 0 or more matching characters
? : matches a single character
[...] : matches any character within the bracket
{*.txt, *.csv} : matches any file whose name ends with txt and csv. but not .pdf files

------------
Sorting
--------------
Important flags:

-n : used to sort numerically in ascending order
-r : used to reverse the order of the output(descending order)
-b : tells the command to ignore leading blanks
-f : tells it to be case-insensitive

cut -d, -f 2 seasonal/winter.csv | grep -v Tooth | sort -r ==> returns the elements of tooth column in descending order

uniq command : remove duplicates of adjacent elements. Hence, it does not drop duplicates of faraway elements.
Therefore, its usually used with "sort" command to put similar elements adjacent to one another and "uniq" applied
to get rid of duplicates(This way we ensure to only have unique elements in the output).

cut -d , -f 2 seasonal/winter.csv | grep -v Tooth | sort | uniq -c ==> returns unique elements and their 
respective number of occurence.






